if (connection === 'open') {
            try {
                setInterval(async () => {
                    const chara=await db.get('chara')
   global.char= chara || []   
                    // let groups = await db.get('chara') || []  groups[Math.floor(Math.random() * groups.length)]
                    let gc = '120363110747479694@g.us'
                    let stars = ["⭐️⭐️⭐️⭐️⭐️", "⭐️⭐️⭐️⭐️", "⭐️⭐️⭐️", "⭐️⭐️", "⭐️", "⭐️⭐️", "⭐️", "⭐️⭐️", "⭐️", "⭐️⭐️⭐️⭐️", "⭐️⭐️⭐️"]
                    let count = stars[Math.floor(Math.random() * stars.length)]
                    const price = Math.floor(Math.random() * (50000 - 25000) + 25000);
                    await db.set(`chara_p_${gc}`, price)
                    const {
                        data
                    } = await axios.get(
                        `https://reina-api.vercel.app/api/mwl/random`
                    )
                    await db.set(`${gc}_chara`, data.data.slug)
                    try {
                        des = data.data.description.substring(0, 100)
                    } catch {
                        des = "none"
                    }
                    console.log('send')
                    console.log(data.data.slug)
                    client.sendMessage(gc, {
                        image: {
                            url: data.data.image
                        },
                        caption: `
                        Name:- ${data.data.name}
                        Name_kanji:- ${data.data.originalName}
                        STARS➡️${count}⬅️
                        ⎙ INFO ⎙:- ${des}
                        PopularityRank:- ${data.data.popularityRank}
                        Cost:- ${price}
                        Link:- ${data.data.url}
                        Use #claim to claim the character	`
                    })
                    setTimeout(async () => {
                        await db.delete(`${gc}_chara`)
                        console.log("deleted")
                    }, 2 * 1000);
                }, 60 * 1000);
            } catch (e) {
                console.log(e)
    
            }
        
        }



//     loadCharaEnabledGroups = async ()=> {
//        const getGroups = await this.client.groupFetchAllParticipating()
//     //     const groups = Object.entries(getGroups)
//     //         .slice(0)
//     //         .map((entry) => entry[1])
//     //     let lengthOfCharacter = this.helper.DB.group.CharacterData
//     //     // const groups = !this.groups ? await this.client.groupFetchAllParticipating() : this.groups
//     //     if (!groups) return void null // add this check
//     //     for (const group of groups) {
//     //         lengthOfCharacter.push(group)
//     //     }
//     //     this.client.log(
//     //         `Successfully loaded ${chalk.blueBright(`${lengthOfCharacter.length}`)} ${
//     //             lengthOfCharacter.length > 1 ? 'groups' : 'group'
//     //         } which has enabled chara`
//     //     )
//     //     await this.spawnChara()
//     // }
//      let getAllGroups = Object.keys(await this.client.groupFetchAllParticipating());

//     //  let characterOfMe = this.helper.DB.group.CharacterData
//     const characterOfMe = this.helper.DB.characterData


//     const groups = await getAllGroups
//     for (const group of groups) {
//         const data = await this.helper.DB.getGroup(group)
//         if (!data.chara) continue
//         this.helper.DB.group.CharacterData.push(group)
//     }
//     this.client.log(
//         `Successfully loaded ${chalk.blueBright(`${characterOfMe.length}`)} ${
//             characterOfMe.length > 1 ? 'groups' : 'group'
//         } which has enabled chara`
//     )
//     await this.spawnChara()
// }










        //schedule('*/1 * * * *', async () => {
        // const groupID = "120363110747479694@g.us";
        // const { chara, bot } = await this.helper.DB.getGroup(groupID);
        // if (bot !== 'all' && bot !== process.env.NAME.split(' ')[0]) return void null;
        // if (!chara) return void null;
        const character = await new Character().getRandomCharacter();
        const price = Math.floor(Math.random() * (50000 - 25000) + 25000);
        let source = '';
        await new Character().getCharacterAnime(character.mal_id)
            .then((res) => (source = res.data[0].anime.title))
            .catch(async () => {
                await new Character().getCharacterManga(character.mal_id.toString())
                    .then((res) => (source = res.data[0].manga.title))
                    .catch(() => {})
            });
        const buffer = await this.helper.utils.getBuffer(character.images.jpg.image_url);
        const buttons = [
            {
                buttonId: 'id1',
                buttonText: { displayText: `${process.env.PREFIX}claim` },
                type: 1
            }
        ]
        const buttonMessage = {
            image: buffer,
            caption: `*A claimable character Appeared!*\n\n🏮 *Name: ${character.name}*\n\n📑 *About:* ${character.about}\n\n💮 *Source: ${source}*\n\n🪙 *Price: ${price}*\n\n*[Use ${this.client.config.prefix}claim to have this character in your gallery]*`,
            footer: '',
            buttons: buttons,
            headerType: 4
        }
        // this.charaResponse.set(groupID, { price, data: character });
        // await this.client.sendMessage(m.from, buttonMessage);
    });